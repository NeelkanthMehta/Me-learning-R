library(quantmod)
require(plotly)
library(PerformanceAnalytics)
install.packages("PortfolioAnalytics")
require(PortfolioAnalytics)

# Get data
getSymbols(c("MSFT","SBUX","IBM","AAPL","^GSPC","AMZN"))

# Assign to Dataframe
# Get Adjusted prices
prices.data <- merge.zoo(MSFT[,6],SBUX[,6],IBM[,6],AAPL[,6],GSPC[,6],AMZN[,6])

# Calculate Returns
returns.data <- CalculateReturns(prices.data)
returns.data <- na.omit(returns.data)

# Set names
colnames(returns.data) <- c("MSFT","SBUX","IBM","AAPL","^GSPC","AMZN")

# Save mean returns vector and sample covariance matrix
meanReturns <- colMeans(returns.data)

covMat <- cov(returns.data)

# Start with the names of the assets
port <- portfolio.spec(assets = c("MSFT","SBUX","IBM","AAPL","^GSPC","AMZN"))

# Box
port <- add.constraint(port, type = "box", min = 0.05, max = 0.8)

# Leverage
port <- add.constraint(portfolio = port, type = "full_investment")

# Generate random Portfolio
rportfolios <- random_portfolios(port, permutations = 500000, rp_method = "sample")

# Get Minimum Variance Portfolio
minvar.port <- add.objective(port, type = "risk", name = "var")

# Optimize
minvar.port <- optimize.portfolio(returns.data, minvar.port, optimize_method = "random", rp = rportfolios)

# Generate maximum return portfolio
maxret.port <- add.objective(port, type = "return", name = "mean")

# Optimize
maxret.opt <- optimize.portfolio(returns.data,maxret.port, optimize_method = "random", rp = rportfolios)

 Generate vector of returns
minret <- 0.06/ 100
maxret <- maxret.opt$weights %*% meanReturns

vec <- seq(minret, maxret, length.out = 100)

# Constructing efficient frontier
eff.frontier <- data.frame(Risk = rep(NA, length(vec)),
                           return = rep(NA, length(vec)),
                           SharpeRatio = rep(NA, length(vec)))

frontier.weights <- mat.or.vec(nr = length(vec), nc = ncol(returns.data))
colnames(frontier.weights) <- colnames(returns.data)

for(i in 1:length(vec)){
  eff.port <- add.constraint(port, type = "return",name = "mean", return_target = vec[i])
  eff.port <- add.objective(eff.port, type = "risk", name = "var")
  # eff.port <- add.objective(eff.port, type = "weight_concentration", name = "HHI",conc_aversion = 0.01)
  eff.port <- optimize.portfolio(returns.data, eff.port, optimize_method = "ROI")
  eff.frontier$Risk[i] <- sqrt(t(eff.port$weights) %*% covMat %*% eff.port$weights)
  eff.frontier$return[i] <- eff.port$weights %*% meanReturns
  eff.frontier$SharpeRatio[i] <- eff.port$Return[i]/ eff.port$Risk[i]
  frontier.weights[i,] = eff.port$weights
  print(paste(round(i/length(vec)* 100,0), "% done..."))
  }
